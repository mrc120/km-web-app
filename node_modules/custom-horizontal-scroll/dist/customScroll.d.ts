/**
 * Custom horizontal scroll bar with floating behavior
 */
export interface ICustomScroll {
    id: string;
    createScroll: () => void;
    initScroll: () => void;
    updateScroll: () => void;
    updateScrollBottomHeight: (bottomHeight: string) => void;
    updateCustomScrollWidthAndPosition: () => void;
    updateScrollPosition: () => void;
    updateCustomScrollPosition: () => void;
    checkCustomScrollVisibility: () => void;
    addListeners: () => void;
    destroyScroll: () => void;
}
declare class CustomScroll {
    element: HTMLElement;
    customScroll: HTMLElement;
    id: string;
    isVisible: boolean;
    scrollParent: HTMLElement | Window;
    bottomHeight?: string;
    constructor(id: string, bottomHeight?: string);
    /**
     * Custom scroll initialization
     */
    initScroll: () => void;
    /**
     * Update Custom scroll update
     */
    updateScroll: () => void;
    /**
     * Create a custom scroll element
     */
    createScroll: () => void;
    /**
     * Update custom scroll bottom height
     */
    updateScrollBottomHeight: (bottomHeight: string) => void;
    /**
    * Calculate horizontal scroll position relative from nearest vertical scroll's bottom position
    */
    calcScrollXRelativeHeight: () => string;
    /**
     * Update custom scroll width and position
     */
    updateCustomScrollWidthAndPosition: () => void;
    /**
     * Update default scroll position
     */
    updateScrollPosition: () => void;
    /**
     * Update custom scroll position
     */
    updateCustomScrollPosition: () => void;
    /**
     * Check the visibility of  custom scroll element
     */
    checkCustomScrollVisibility: () => void;
    /**
     * Add listeners
     */
    addListeners: () => void;
    /**
     * Remove listeners
     */
    destroyScroll: () => void;
}
export default CustomScroll;
