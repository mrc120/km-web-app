Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

/**
 * Custom horizontal scroll bar with floating behavior
 */
var CustomScroll = /** @class */ (function () {
    function CustomScroll(id, bottomHeight) {
        var _this = this;
        /**
         * Custom scroll initialization
         */
        this.initScroll = function () {
            _this.createScroll();
            _this.addListeners();
        };
        /**
         * Update Custom scroll update
         */
        this.updateScroll = function () {
            if (_this.element) {
                _this.customScroll.remove();
                _this.createScroll();
                _this.updateCustomScrollPosition();
                _this.customScroll.addEventListener("scroll", _this.updateScrollPosition);
            }
        };
        /**
         * Create a custom scroll element
         */
        this.createScroll = function () {
            _this.element = document.getElementById(_this.id);
            if (_this.element) {
                _this.element.style.overflowX = "scroll";
                var scrollElement = document.createElement("div");
                scrollElement.style.bottom = "0px";
                scrollElement.style.height = "35px";
                scrollElement.style.overflow = "auto";
                scrollElement.style.position = "fixed";
                var inner = document.createElement("div");
                // Added * For Browser compatibility with Safari
                inner.textContent = "*";
                inner.style.height = "1px";
                inner.style.overflow = "hidden";
                inner.style.width = _this.element.scrollWidth + "px";
                scrollElement.appendChild(inner);
                _this.element.appendChild(scrollElement);
                _this.customScroll = scrollElement;
                _this.isVisible = true;
                _this.updateCustomScrollWidthAndPosition();
                _this.scrollParent = getScrollParent(_this.element);
                _this.customScroll.style.bottom = _this.calcScrollXRelativeHeight();
            }
        };
        /**
         * Update custom scroll bottom height
         */
        this.updateScrollBottomHeight = function (bottomHeight) {
            _this.bottomHeight = bottomHeight;
        };
        /**
        * Calculate horizontal scroll position relative from nearest vertical scroll's bottom position
        */
        this.calcScrollXRelativeHeight = function () {
            var _a;
            var scrollXRelativeHeight = _this.scrollParent &&
                _this.scrollParent.getBoundingClientRect ?
                _this.scrollParent.getBoundingClientRect().bottom : window.innerHeight;
            return window.innerHeight - scrollXRelativeHeight + Number((_a = _this.bottomHeight) === null || _a === void 0 ? void 0 : _a.replace("px", "")) + "px";
        };
        /**
         * Update custom scroll width and position
         */
        this.updateCustomScrollWidthAndPosition = function () {
            if (_this.element) {
                _this.customScroll.style.bottom = _this.calcScrollXRelativeHeight();
                _this.customScroll.style.width = _this.element.offsetWidth + "px";
                _this.customScroll.style.left = Math.round(_this.element.getBoundingClientRect().left) + "px";
                _this.checkCustomScrollVisibility();
            }
        };
        /**
         * Update default scroll position
         */
        this.updateScrollPosition = function () {
            if (_this.element.scrollLeft !== _this.customScroll.scrollLeft) {
                _this.element.scrollLeft = _this.customScroll.scrollLeft;
            }
        };
        /**
         * Update custom scroll position
         */
        this.updateCustomScrollPosition = function () {
            if (_this.element.scrollLeft !== _this.customScroll.scrollLeft) {
                _this.customScroll.scrollLeft = _this.element.scrollLeft;
            }
        };
        /**
         * Check the visibility of  custom scroll element
         */
        this.checkCustomScrollVisibility = function () {
            var maxVisibleY = (_this.scrollParent &&
                _this.scrollParent.getBoundingClientRect &&
                _this.scrollParent.getBoundingClientRect().bottom)
                || document.documentElement.clientHeight;
            var contRect = _this.element.getBoundingClientRect();
            var relativeHeight = _this.bottomHeight
                ? Number(_this.bottomHeight.replace("px", ""))
                : 0;
            var isVisible = contRect.bottom + relativeHeight > maxVisibleY &&
                contRect.top + relativeHeight <= maxVisibleY;
            if (_this.isVisible !== isVisible) {
                _this.customScroll.style.visibility = isVisible ? "visible" : "hidden";
            }
            _this.isVisible = isVisible;
        };
        /**
         * Add listeners
         */
        this.addListeners = function () {
            if (_this.element) {
                _this.element.addEventListener("scroll", _this.updateCustomScrollPosition);
                _this.customScroll.addEventListener("scroll", _this.updateScrollPosition);
                if (_this.scrollParent) {
                    _this.scrollParent.addEventListener("scroll", _this.checkCustomScrollVisibility);
                }
                window.addEventListener("resize", _this.updateCustomScrollWidthAndPosition);
            }
        };
        /**
         * Remove listeners
         */
        this.destroyScroll = function () {
            if (_this.element) {
                _this.element.removeEventListener("scroll", _this.updateCustomScrollPosition);
                _this.customScroll.removeEventListener("scroll", _this.updateScrollPosition);
                _this.customScroll.remove();
            }
            if (_this.scrollParent) {
                _this.scrollParent.removeEventListener("scroll", _this.checkCustomScrollVisibility);
            }
            window.removeEventListener("resize", _this.updateCustomScrollWidthAndPosition);
        };
        this.id = id;
        this.bottomHeight = bottomHeight;
        this.isVisible = false;
        this.scrollParent = window;
        this.element = document.getElementById(id);
        this.customScroll = document.createElement("div");
    }
    return CustomScroll;
}());
/**
 * Find the closest parent having scroll context.
 * Add scroll listener to this element for checking scroll visibility.
 * As per the current requirement either modal or window having the scroll.
 * @param element
 */
var getScrollParent = function (element) {
    var scrollElement = element;
    while (scrollElement && scrollElement !== document.body) {
        if (scrollElement.classList.contains("vertical-scroll")) {
            return scrollElement;
        }
        scrollElement = scrollElement.parentElement;
    }
    return window;
};

var withCustomScroll = function (Component) { return function (props) {
    // A unique id which represent each instance of custom scroll
    var uniqueId = "custom-scroll-" + Date.now() + "-" + Math.random().toString().slice(2);
    var id = React.useState(uniqueId)[0];
    var customScroll = React.useState(function () {
        return new CustomScroll(id, "0px");
    })[0];
    if (customScroll) {
        React.useEffect(function () {
            // Add Scroll element
            customScroll.initScroll();
            return function () {
                // Remove Scroll element
                customScroll.destroyScroll();
            };
        }, []);
        React.useEffect(function () {
            // Update Scroll element
            customScroll.updateScroll();
        }, [props.children]);
    }
    return React.createElement(Component, __assign({}, props, { customScroll: customScroll }));
}; };

exports.withCustomScroll = withCustomScroll;
//# sourceMappingURL=index.js.map
