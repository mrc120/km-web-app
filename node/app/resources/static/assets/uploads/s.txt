const fs = require("fs");
const { title } = require("process");
const { Buffer } = require('buffer');
const db = require("../models");
const Zarz_pdf = db.zarz_pdf;
const File_uchwaly = db.file_uchwaly;
const File_podst = db.file_podst;
const File_zarz = db.file_zarz;
const Op = db.Sequelize.Op;

const baseUrl = "http://localhost:8080/api/uchwaly"
const baseUrl_zarz = "http://localhost:8080/api/files_zarz"
const baseUrl_podst = "http://localhost:8080/api/files_podst"

//PAGINATION 
//Wydzielic
const getPagination = (page, size) => {
  const limit = size ? +size : 16;
  const offset = page ? page * limit : 0;

  return { limit, offset };
};

const getPagingData = (data, page, limit) => {
  const { count: totalItems,
          rows : entries     }  = data;
  const currentPage = page ? + page : 0;
  const totalPages  = Math.ceil(totalItems / limit);

  return { totalItems, totalPages, currentPage, entries,};
};

exports.openFile = (req, res) => {
  const fileName = req.params.name;
  const directoryPath = __basedir + "/app/resources/static/assets/uploads/";
  res.sendFile(directoryPath + fileName, fileName, (err) => {
    if (err) {
      res.status(500).send({
        message: "Nie można otworzyć pliku, błąd: " + err,
      });
    }
  });
}
//UPLOAD
exports.uploadFiles = async (req, res) => {


  try {
    File_uchwaly.create({
      title: req.body.title,
      description: req.body.description,
      name: req.files['file'][0].originalname,
      nameAtt: req.files['file_attachment'][0].originalname,
      data: fs.readFileSync(
        __basedir + "/app/resources/static/assets/uploads/" + req.files['file'][0].filename, 'UTF-8'
      ),

      attachment: fs.readFileSync(
        __basedir + "/app/resources/static/assets/uploads/" + req.files['file_attachment'][0].filename, 'UTF-8'
      ),
    }).then((file) => {
      fs.writeFileSync(
        __basedir + "/app/resources/static/assets/tmp/" + file.name,
        file.data
      );
      fs.writeFileSync(
        __basedir + "/app/resources/static/assets/tmp/" + file.nameAtt,
        file.attachment
      );
      return res.send(`Plik został wysłany.`);
    });
  } catch (error) {
    console.log(error);
    return res.send(`Błąd podczas wysyłki pliku do serwera: ${error}`);
  }

};

exports.getFile = async(req, res) => {
  try {
    const zarz_id= req.params.zarz_id;
    const name = req.params.name;
    const findPDF = await Zarz_pdf.findOne({
      where: { zarz_id, name }
    });
    if (!findPDF) {
      return res.status(404).json({ message: 'User not found' });
    }
    res.json(findPDF);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal server error' });
  }
};
exports.uploadFiles_zarz = async (req, res) => {
  try {
    File_zarz.create({
      title: req.body.title,
      description: req.body.description,
      name: req.files['file'][0].originalname,
      nameAtt: req.files['file_attachment'] ? req.files['file_attachment'][0].originalname : null,
      // nameAtt: req.files['file_attachment'][0].originalname ? req.files['file_attachment'][0] : null,

      data: fs.readFileSync(__basedir + "/app/resources/static/assets/uploads/" +
       req.files['file'][0].filename),

      attachment: req.files['file_attachment'] ? fs.readFileSync(__basedir + "/app/resources/static/assets/uploads/" + 
        req.files['file_attachment'][0].filename) : null,
    }).then((file) => {
      fs.writeFileSync(
        __basedir + "/app/resources/static/assets/tmp/" + file.name,
        file.data
        );
        fs.writeFileSync(
          __basedir + "/app/resources/static/assets/tmp/" + file.nameAtt,
          file.attachment
          );
          return res.send(`Plik został wysłany.`);
        });
  } catch (error) {
    console.log(error);
    return res.send(`Błąd podczas wysyłki pliku do serwera: ${error}`);
  }
};

exports.uploadFiles_podst = async (req, res) => {
  try {
    File_podst.create({
      title: req.body.title,
      description: req.body.description,
      name: req.files['file'][0].originalname,
      nameAtt: req.files['file_attachment'][0].originalname,
      data: fs.readFileSync(
        __basedir + "/app/resources/static/assets/uploads/" + req.files['file'][0].filename, 'UTF-8'
      ),

      attachment: fs.readFileSync(
        __basedir + "/app/resources/static/assets/uploads/" + req.files['file_attachment'][0].filename, 'UTF-8'
      ),
    }).then((file) => {
      fs.writeFileSync(
        __basedir + "/app/resources/static/assets/uploads/" + file.name,
        file.data
        );
        fs.writeFileSync(
          __basedir + "/app/resources/static/assets/uploads/" + file.nameAtt,
          file.attachment
          );
          return res.send(`Plik został wysłany.`);
        });
  } catch (error) {
    console.log(error);
    return res.send(`Błąd podczas wysyłki pliku do serwera: ${error}`);
  }
};



//GETLIST

exports.findAll = (req, res) => {
 //pagination
 const { page, size, title } = req.query;
 var condition = title ? { title: { [Op.like]: `%${title}%` } } : null;
 const { limit, offset } = getPagination(page, size);

 File_uchwaly.findAndCountAll({ where: condition, limit, offset })
      .then(data => {
        const response = getPagingData(data, page, limit);  
          res.send(response);
      })
      .catch(err => {
          res.status(500).send({
              message:
                  err.message || "Wystąpił błąd podczas wydobywania danych."
          });
      });
};

exports.getListFiles_zarz = async (req, res) => {
//pagination
const { page, size, title } = req.query;
var condition = title ? { title: { [Op.like]: `%${title}%` } } : null;
const { limit, offset } = getPagination(page, size);

const directoryPath = __basedir + "/app/resources/static/assets/uploads/";

fs.readdir(directoryPath, function (err, files) {
  if (err) {
    res.status(500).send({
      message: "Błąd w wydobyciu plików!",
    });
  }

  File_zarz.findAndCountAll({ where: condition, limit, offset,
              attributes: ['id', 'title', 'description', 'name', 'nameAtt']  })
    .then(data => {
      const response = getPagingData(data, page, limit);
      let fileInfos = [];
      files.forEach((file) => {
        fileInfos.push({
          url: baseUrl + file,
        });
      });
      res.send(response);
    })
    .catch(err => {
      res.status(500).send({
        message:
          err.message || "Some error occurred while retrieving "
      });
    });
})
};



exports.getFileAll = async(req, res) => {
  Zarz_pdf.findAll({})
  .then(state => {
      res.send(state);
  })
  .catch(err => {
      res.status(500).send({
          message:
              err.message || "Wystąpił błąd podczas wydobywania danych."
      });
  });
};



exports.getListFiles_podst = (req, res) => {
   //pagination
   const { page, size, title } = req.query;
   var condition = title ? { title: { [Op.like]: `%${title}%` } } : null;
   const { limit, offset } = getPagination(page, size);

   const directoryPath = __basedir + "/app/resources/static/assets/uploads/";

   fs.readdir(directoryPath, function (err, files) {
     if (err) {
       res.status(500).send({
         message: "Błąd w wydobyciu plików!",
       });
     }
     File_podst.findAndCountAll({ where: condition, limit, offset,
      attributes: ['id', 'title', 'description', 'name'] })
       .then(title => {
         const response = getPagingData(title, page, limit);
         let fileInfos = [];
         files.forEach((file) => {
           fileInfos.push({
             url: baseUrl_podst + file,
           });
         });
         res.send(response);
       })
       .catch(err => {
         res.status(500).send({
           message:
             err.message || "Wystąpił błąd."
         });
       });
   })
};

//Potrzebne to w ogóle?

// exports.getSingleFile = (req, res) => {

//   const id = req.params.id;
//   File.findByPk(id)
//     .then(data => {
//       res.send(data);
//     })
//     .catch(err => {
//       res.status(500).send({
//         message: "Nie przywrocono danych po id:" + id
//       });
//     });
// };



//UPDATE 
exports.update_file = (req, res) => {
  const id = req.params.id;
  try {


    File.update({
      title: req.body.title,
      description: req.body.description,

    }, { where: { id: id } })
  } catch (error) {
    console.log(error);
    return res.send(`Błąd podczas wysyłki pliku do serwera: ${error}`);
  }
  return res.send(`Plik został wysłany.`);
};

exports.update_file_zarz = (req, res) => {
  const id = req.params.id;
  try {
    File_zarz.update({
      title: req.body.title,
      description: req.body.description,
    }, { where: { id: id } })
  } catch (error) {
    console.log(error);
    return res.send(`Błąd podczas wysyłki pliku do serwera: ${error}`);
  }
  return res.send(`Plik został wysłany.`);
};

exports.update_file_podst = (req, res) => {
  const id = req.params.id;
  try {
    File_podst.update({
      title: req.body.title,
      description: req.body.description,
    }, { where: { id: id } })
  } catch (error) {
    console.log(error);
    return res.send(`Błąd podczas wysyłki pliku do serwera: ${error}`);
  }
  return res.send(`Plik został wysłanXDy.`);
};

//DELETE_FILE

exports.delete_file = (req, res) => {

  const id = req.params.id;
  File.destroy({
    where: { id: id }
  })
    .then(num => {
      if (num == 1) {
        res.send({
          message: "Pozycja została usunięta!"
        });
      } else {
        res.send({
          message: `Nie można usunąć id=${id}.`
        });

      }
    })
    .catch(err => {
      res.status(500).send({
        message: "Nie można usunąć" + id
      });
    });
};

exports.delete_file_zarz = (req, res) => {

  const id = req.params.id;
  File_zarz.destroy({
    where: { id: id }
  })
    .then(num => {
      if (num == 1) {
        res.send({
          message: "Pozycja została usunięta!"
        });
      } else {
        res.send({
          message: `Nie można usunąć id=${id}.`
        });

      }
    })
    .catch(err => {
      res.status(500).send({
        message: "Nie można usunąć" + id
      });
    });
};

exports.delete_file_podst = (req, res) => {

  const id = req.params.id;
  File_podst.destroy({
    where: { id: id }
  })
    .then(num => {
      if (num == 1) {
        res.send({
          message: "Pozycja została usunięta!"
        });
      } else {
        res.send({
          message: `Nie można usunąć id=${id}.`
        });

      }
    })
    .catch(err => {
      res.status(500).send({
        message: "Nie można usunąć" + id
      });
    });
};




//
// exports.getListFiles = async (req, res) => {
//   //pagination
//   const { page, size, title } = req.query;
//   var condition = title ? { title: { [Op.like]: `%${title}%` } } : null;
//   const { limit, offset } = getPagination(page, size);

//   const directoryPath = __basedir + "/app/resources/static/assets/uploads/";

//   fs.readdir(directoryPath, function (err, files) {
//     if (err) {
//       res.status(500).send({
//         message: "Błąd w wydobyciu plików!",
//       });
//     }

//     File.findAndCountAll({ where: condition, limit, offset })
//       .then(data => {
//         const response = getPagingData(data, page, limit);
//         let fileInfos = [];
//         files.forEach((file) => {
//           fileInfos.push({
//             url: baseUrl + file,
//           });
//         });
//         res.send(response);
//       })
//       .catch(err => {
//         res.status(500).send({
//           message:
//             err.message || "Some error occurred while retrieving tutorials."
//         });
//       });
//   })
//   };